/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SyntaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Syntax");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsRuleParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Syntax:
		//	elements+=Rule*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Rule*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Rule
		public RuleCall getElementsRuleParserRuleCall_0() { return cElementsRuleParserRuleCall_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLeftParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cRightParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Rule:
		//	Left ':=' Right;
		@Override public ParserRule getRule() { return rule; }
		
		//Left ':=' Right
		public Group getGroup() { return cGroup; }
		
		//Left
		public RuleCall getLeftParserRuleCall_0() { return cLeftParserRuleCall_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//Right
		public RuleCall getRightParserRuleCall_2() { return cRightParserRuleCall_2; }
	}
	public class LeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Left");
		private final RuleCall cNonTerminalParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Left:
		//	NonTerminal;
		@Override public ParserRule getRule() { return rule; }
		
		//NonTerminal
		public RuleCall getNonTerminalParserRuleCall() { return cNonTerminalParserRuleCall; }
	}
	public class RightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Right");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAlternativeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cRAlternativeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Right:
		//	Alternative RAlternative*;
		@Override public ParserRule getRule() { return rule; }
		
		//Alternative RAlternative*
		public Group getGroup() { return cGroup; }
		
		//Alternative
		public RuleCall getAlternativeParserRuleCall_0() { return cAlternativeParserRuleCall_0; }
		
		//RAlternative*
		public RuleCall getRAlternativeParserRuleCall_1() { return cRAlternativeParserRuleCall_1; }
	}
	public class RAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RAlternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAlternativeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//RAlternative:
		//	'|' Alternative;
		@Override public ParserRule getRule() { return rule; }
		
		//'|' Alternative
		public Group getGroup() { return cGroup; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }
		
		//Alternative
		public RuleCall getAlternativeParserRuleCall_1() { return cAlternativeParserRuleCall_1; }
	}
	public class AlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Alternative");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNonTerminalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTerminalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Alternative:
		//	(NonTerminal | Terminal)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(NonTerminal | Terminal)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NonTerminal
		public RuleCall getNonTerminalParserRuleCall_0() { return cNonTerminalParserRuleCall_0; }
		
		//Terminal
		public RuleCall getTerminalParserRuleCall_1() { return cTerminalParserRuleCall_1; }
	}
	public class TerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Terminal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTerminalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Terminal:
		//	'terminal' ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'terminal' ID
		public Group getGroup() { return cGroup; }
		
		//'terminal'
		public Keyword getTerminalKeyword_0() { return cTerminalKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class NonTerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NonTerminal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNonTerminalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//NonTerminal:
		//	'non-terminal' ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'non-terminal' ID
		public Group getGroup() { return cGroup; }
		
		//'non-terminal'
		public Keyword getNonTerminalKeyword_0() { return cNonTerminalKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private final SyntaxElements pSyntax;
	private final RuleElements pRule;
	private final LeftElements pLeft;
	private final RightElements pRight;
	private final RAlternativeElements pRAlternative;
	private final AlternativeElements pAlternative;
	private final TerminalElements pTerminal;
	private final NonTerminalElements pNonTerminal;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSyntax = new SyntaxElements();
		this.pRule = new RuleElements();
		this.pLeft = new LeftElements();
		this.pRight = new RightElements();
		this.pRAlternative = new RAlternativeElements();
		this.pAlternative = new AlternativeElements();
		this.pTerminal = new TerminalElements();
		this.pNonTerminal = new NonTerminalElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Syntax:
	//	elements+=Rule*;
	public SyntaxElements getSyntaxAccess() {
		return pSyntax;
	}
	
	public ParserRule getSyntaxRule() {
		return getSyntaxAccess().getRule();
	}
	
	//Rule:
	//	Left ':=' Right;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Left:
	//	NonTerminal;
	public LeftElements getLeftAccess() {
		return pLeft;
	}
	
	public ParserRule getLeftRule() {
		return getLeftAccess().getRule();
	}
	
	//Right:
	//	Alternative RAlternative*;
	public RightElements getRightAccess() {
		return pRight;
	}
	
	public ParserRule getRightRule() {
		return getRightAccess().getRule();
	}
	
	//RAlternative:
	//	'|' Alternative;
	public RAlternativeElements getRAlternativeAccess() {
		return pRAlternative;
	}
	
	public ParserRule getRAlternativeRule() {
		return getRAlternativeAccess().getRule();
	}
	
	//Alternative:
	//	(NonTerminal | Terminal)+;
	public AlternativeElements getAlternativeAccess() {
		return pAlternative;
	}
	
	public ParserRule getAlternativeRule() {
		return getAlternativeAccess().getRule();
	}
	
	//Terminal:
	//	'terminal' ID;
	public TerminalElements getTerminalAccess() {
		return pTerminal;
	}
	
	public ParserRule getTerminalRule() {
		return getTerminalAccess().getRule();
	}
	
	//NonTerminal:
	//	'non-terminal' ID;
	public NonTerminalElements getNonTerminalAccess() {
		return pNonTerminal;
	}
	
	public ParserRule getNonTerminalRule() {
		return getNonTerminalAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
