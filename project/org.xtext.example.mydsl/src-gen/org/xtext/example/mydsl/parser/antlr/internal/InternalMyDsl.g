/*
 * generated by Xtext 2.12.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Syntax";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSyntax
entryRuleSyntax returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSyntaxRule()); }
	iv_ruleSyntax=ruleSyntax
	{ $current=$iv_ruleSyntax.current; }
	EOF;

// Rule Syntax
ruleSyntax returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSyntaxAccess().getElementsRuleParserRuleCall_0());
			}
			lv_elements_0_0=ruleRule
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getSyntaxRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.example.mydsl.MyDsl.Rule");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleRule
entryRuleRule returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current.getText(); }
	EOF;

// Rule Rule
ruleRule returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRuleAccess().getLeftParserRuleCall_0());
		}
		this_Left_0=ruleLeft
		{
			$current.merge(this_Left_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=':='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRuleAccess().getColonEqualsSignKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getRuleAccess().getRightParserRuleCall_2());
		}
		this_Right_2=ruleRight
		{
			$current.merge(this_Right_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLeft
entryRuleLeft returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLeftRule()); }
	iv_ruleLeft=ruleLeft
	{ $current=$iv_ruleLeft.current.getText(); }
	EOF;

// Rule Left
ruleLeft returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getLeftAccess().getNonTerminalParserRuleCall());
	}
	this_NonTerminal_0=ruleNonTerminal
	{
		$current.merge(this_NonTerminal_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleRight
entryRuleRight returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRightRule()); }
	iv_ruleRight=ruleRight
	{ $current=$iv_ruleRight.current.getText(); }
	EOF;

// Rule Right
ruleRight returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRightAccess().getAlternativeParserRuleCall_0());
		}
		this_Alternative_0=ruleAlternative
		{
			$current.merge(this_Alternative_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getRightAccess().getRAlternativeParserRuleCall_1());
			}
			this_RAlternative_1=ruleRAlternative
			{
				$current.merge(this_RAlternative_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleRAlternative
entryRuleRAlternative returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRAlternativeRule()); }
	iv_ruleRAlternative=ruleRAlternative
	{ $current=$iv_ruleRAlternative.current.getText(); }
	EOF;

// Rule RAlternative
ruleRAlternative returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='|'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRAlternativeAccess().getVerticalLineKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getRAlternativeAccess().getAlternativeParserRuleCall_1());
		}
		this_Alternative_1=ruleAlternative
		{
			$current.merge(this_Alternative_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAlternative
entryRuleAlternative returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAlternativeRule()); }
	iv_ruleAlternative=ruleAlternative
	{ $current=$iv_ruleAlternative.current.getText(); }
	EOF;

// Rule Alternative
ruleAlternative returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAlternativeAccess().getNonTerminalParserRuleCall_0());
		}
		this_NonTerminal_0=ruleNonTerminal
		{
			$current.merge(this_NonTerminal_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAlternativeAccess().getTerminalParserRuleCall_1());
		}
		this_Terminal_1=ruleTerminal
		{
			$current.merge(this_Terminal_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)+
;

// Entry rule entryRuleTerminal
entryRuleTerminal returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTerminalRule()); }
	iv_ruleTerminal=ruleTerminal
	{ $current=$iv_ruleTerminal.current.getText(); }
	EOF;

// Rule Terminal
ruleTerminal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='terminal'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTerminalAccess().getTerminalKeyword_0());
		}
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getTerminalAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleNonTerminal
entryRuleNonTerminal returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNonTerminalRule()); }
	iv_ruleNonTerminal=ruleNonTerminal
	{ $current=$iv_ruleNonTerminal.current.getText(); }
	EOF;

// Rule NonTerminal
ruleNonTerminal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='non-terminal'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNonTerminalAccess().getNonTerminalKeyword_0());
		}
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getNonTerminalAccess().getIDTerminalRuleCall_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
