/*
 * generated by Xtext 2.12.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleSyntax
entryRuleSyntax
:
{ before(grammarAccess.getSyntaxRule()); }
	 ruleSyntax
{ after(grammarAccess.getSyntaxRule()); } 
	 EOF 
;

// Rule Syntax
ruleSyntax 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSyntaxAccess().getElementsAssignment()); }
		(rule__Syntax__ElementsAssignment)*
		{ after(grammarAccess.getSyntaxAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getGroup()); }
		(rule__Rule__Group__0)
		{ after(grammarAccess.getRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeft
entryRuleLeft
:
{ before(grammarAccess.getLeftRule()); }
	 ruleLeft
{ after(grammarAccess.getLeftRule()); } 
	 EOF 
;

// Rule Left
ruleLeft 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeftAccess().getNonTerminalParserRuleCall()); }
		ruleNonTerminal
		{ after(grammarAccess.getLeftAccess().getNonTerminalParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRight
entryRuleRight
:
{ before(grammarAccess.getRightRule()); }
	 ruleRight
{ after(grammarAccess.getRightRule()); } 
	 EOF 
;

// Rule Right
ruleRight 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRightAccess().getGroup()); }
		(rule__Right__Group__0)
		{ after(grammarAccess.getRightAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRAlternative
entryRuleRAlternative
:
{ before(grammarAccess.getRAlternativeRule()); }
	 ruleRAlternative
{ after(grammarAccess.getRAlternativeRule()); } 
	 EOF 
;

// Rule RAlternative
ruleRAlternative 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRAlternativeAccess().getGroup()); }
		(rule__RAlternative__Group__0)
		{ after(grammarAccess.getRAlternativeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAlternative
entryRuleAlternative
:
{ before(grammarAccess.getAlternativeRule()); }
	 ruleAlternative
{ after(grammarAccess.getAlternativeRule()); } 
	 EOF 
;

// Rule Alternative
ruleAlternative 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getAlternativeAccess().getAlternatives()); }
			(rule__Alternative__Alternatives)
			{ after(grammarAccess.getAlternativeAccess().getAlternatives()); }
		)
		(
			{ before(grammarAccess.getAlternativeAccess().getAlternatives()); }
			(rule__Alternative__Alternatives)*
			{ after(grammarAccess.getAlternativeAccess().getAlternatives()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerminal
entryRuleTerminal
:
{ before(grammarAccess.getTerminalRule()); }
	 ruleTerminal
{ after(grammarAccess.getTerminalRule()); } 
	 EOF 
;

// Rule Terminal
ruleTerminal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerminalAccess().getGroup()); }
		(rule__Terminal__Group__0)
		{ after(grammarAccess.getTerminalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNonTerminal
entryRuleNonTerminal
:
{ before(grammarAccess.getNonTerminalRule()); }
	 ruleNonTerminal
{ after(grammarAccess.getNonTerminalRule()); } 
	 EOF 
;

// Rule NonTerminal
ruleNonTerminal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNonTerminalAccess().getGroup()); }
		(rule__NonTerminal__Group__0)
		{ after(grammarAccess.getNonTerminalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlternativeAccess().getNonTerminalParserRuleCall_0()); }
		ruleNonTerminal
		{ after(grammarAccess.getAlternativeAccess().getNonTerminalParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAlternativeAccess().getTerminalParserRuleCall_1()); }
		ruleTerminal
		{ after(grammarAccess.getAlternativeAccess().getTerminalParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getLeftParserRuleCall_0()); }
	ruleLeft
	{ after(grammarAccess.getRuleAccess().getLeftParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getColonEqualsSignKeyword_1()); }
	':='
	{ after(grammarAccess.getRuleAccess().getColonEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getRightParserRuleCall_2()); }
	ruleRight
	{ after(grammarAccess.getRuleAccess().getRightParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Right__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__0__Impl
	rule__Right__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getAlternativeParserRuleCall_0()); }
	ruleAlternative
	{ after(grammarAccess.getRightAccess().getAlternativeParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getRAlternativeParserRuleCall_1()); }
	(ruleRAlternative)*
	{ after(grammarAccess.getRightAccess().getRAlternativeParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RAlternative__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RAlternative__Group__0__Impl
	rule__RAlternative__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RAlternative__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRAlternativeAccess().getVerticalLineKeyword_0()); }
	'|'
	{ after(grammarAccess.getRAlternativeAccess().getVerticalLineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RAlternative__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RAlternative__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RAlternative__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRAlternativeAccess().getAlternativeParserRuleCall_1()); }
	ruleAlternative
	{ after(grammarAccess.getRAlternativeAccess().getAlternativeParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Terminal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terminal__Group__0__Impl
	rule__Terminal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalAccess().getTerminalKeyword_0()); }
	'terminal'
	{ after(grammarAccess.getTerminalAccess().getTerminalKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terminal__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
	{ after(grammarAccess.getTerminalAccess().getIDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NonTerminal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NonTerminal__Group__0__Impl
	rule__NonTerminal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NonTerminal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNonTerminalAccess().getNonTerminalKeyword_0()); }
	'non-terminal'
	{ after(grammarAccess.getNonTerminalAccess().getNonTerminalKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NonTerminal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NonTerminal__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NonTerminal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNonTerminalAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
	{ after(grammarAccess.getNonTerminalAccess().getIDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Syntax__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSyntaxAccess().getElementsRuleParserRuleCall_0()); }
		ruleRule
		{ after(grammarAccess.getSyntaxAccess().getElementsRuleParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
